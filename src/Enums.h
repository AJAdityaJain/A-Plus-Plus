#pragma once
enum TokenType {
	NONE,
	SIZE_T,
	BOOL,
	SHORT,
	INT,
	FLOAT,
	DOUBLE,
	LONG,
	STRING,

	ID,

	FUNC,
	IF,
	ELSE,
	WHILE,
	LOOP,
	POOL,
	WITH,
	RETURN,
	STOP,
	SKIP,

	BRACKET_OPEN,
	BRACKET_CLOSE,
	PARENTHESIS_OPEN,
	PARENTHESIS_CLOSE,
	CURLY_OPEN,
	CURLY_CLOSE,

	LINE_END,
	COMMA,
	COLON,
	ASSIGN,
	OPERATOR,

};

enum StatementType {
	NONE_STMT,
	BOOL_STMT,
	SHORT_STMT,
	INT_STMT,
	FLOAT_STMT,
	DOUBLE_STMT,
	LONG_STMT,
	STRING_STMT,
	SIZE,
	ARRAY,
	ARRAY_ACCESS,
	REFERENCE,
	REGISTER,
	PTR,
	COMPILETIME_TOKEN,

	FUNC_CALL,
	FUNC_DEFINITION,
	ASSIGNMENT,
	WHILE_STMT,
	IF_STMT,
	INTERUPT,
	MULTI_OPERATION,
	UN_OPERATION,
	SCOPE,
};

enum AssignmentType {
	NONE_ASSIGN,
	EQUALS,
	PLUS_EQUAL,
	MINUS_EQUAL,
	MULTIPLY_EQUAL,
	DIVIDE_EQUAL,

	MODULO_EQUAL,
	BITWISE_OR_EQUAL,
	BITWISE_AND_EQUAL,

};

enum UnaryOperatorType {
	NONE_UN_OPERATOR,
	NOT,
	BITWISE_NOT,
	POSITIVE,
	NEGATIVE,
};

enum MultipleOperatorType {
	NONE_BI_OPERATOR,

	OR,
	AND,
	BITWISE_OR,
	XOR,
	BITWISE_AND,

	COMPARISON,
	NOT_EQUAL,

	GREATER_THAN,
	SMALLER_THAN,
	GREATER_THAN_EQUAL,
	SMALLER_THAN_EQUAL,

	MINUS,
	PLUS,

	DIVIDE,
	MULTIPLY,
	MODULO,
};

enum InBuiltIds {
	MAIN,
	PRINT,
	SCAN,
	BEEP,
	LEN,
	SIZEOF
};

enum INSTRUCTION {
	CDQ0,

	NOT1,
	NEG1,
	IDIV1,

	JZ1,
	JNZ1,
	JMP1,

	SETE1,
	SETNE1,
	SETG1,
	SETGE1,
	SETA1,
	SETAE1,
	SETL1,
	SETLE1,
	SETB1,
	SETBE1,

	MOV2,

	ADD2,
	SUB2,
	MUL2,
	DIV2,

	TEST2,
	CMP2,
	
	AND2,
	OR2,
	XOR2,
};

enum CompilationTokenType {
	COMPILETIME_NONE,
	COMPILETIME_IGNORE,
	COMPILETIME_PTR,
	COMPILETIME_REGISTER

};

constexpr static int ALIGN = 16;
struct AsmSize {
	int sz;
	int prec;
};
constexpr AsmSize VOID_SIZE = { 0 ,0 };

constexpr AsmSize BOOL_SIZE = { 1,0 };

constexpr AsmSize SHORT_SIZE = { 2,0 };

constexpr AsmSize INT_SIZE = { 4,0 };
constexpr AsmSize FLOAT_SIZE = { 4,1 };

constexpr AsmSize STRPTR_SIZE = { 8,-1 };
constexpr AsmSize LONG_SIZE = { 8,0 };
constexpr AsmSize DOUBLE_SIZE = { 8,2 };