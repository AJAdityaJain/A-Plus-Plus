enum TokenType {
	NONE,

	BIT,
	INT,
	FLOAT,
	DOUBLE,
	STRING,

	ID,

	FUNC,
	IF,
	ELSE,
	WHILE,
	RETURN,

	BRACKET_OPEN,
	BRACKET_CLOSE,
	PARENTHESIS_OPEN,
	PARENTHESIS_CLOSE,
	CURLY_OPEN,
	CURLY_CLOSE,

	LINE_END,
	COMMA,
	COLON,
	ASSIGN,
	OPERATOR,

};

enum StatementType {
	NONE_STMT,
	BIT_STMT,
	INT_STMT,
	FLOAT_STMT,
	DOUBLE_STMT,
	STRING_STMT,
	REFERENCE,
	REGISTER,
	PTR,
	_TOKEN,

	CALL,
	FUNC_DEFINITION,
	ASSIGNMENT,
	WHILE_STMT,
	IF_STMT,
	ELSE_STMT,
	MULTI_OPERATION,
	UN_OPERATION,
	SCOPE,
};

enum AssignmentType {
	NONE_ASSIGN,
	EQUALS,
	PLUS_EQUAL,
	MINUS_EQUAL,
	MULTIPLY_EQUAL,
	DIVIDE_EQUAL,

	MODULO_EQUAL,
	BITWISE_OR_EQUAL,
	BITWISE_AND_EQUAL,

};

enum UnaryOperatorType {
	NONE_UN_OPERATOR,
	NOT,
	BITWISE_NOT,
	POSITIVE,
	NEGATIVE,
};

enum MultipleOperatorType {
	NONE_BI_OPERATOR,

	OR,
	AND,
	BITWISE_OR,
	XOR,
	BITWISE_AND,

	COMPARISON,
	NOT_EQUAL,

	GREATER_THAN,
	SMALLER_THAN,
	GREATER_THAN_EQUAL,
	SMALLER_THAN_EQUAL,

	MINUS,
	PLUS,

	DIVIDE,
	MULTIPLY,
	MODULO,
};


enum InBuiltIds {
	MAIN,
	PRINT

};

enum AsmSize {
	VOID_SIZE = 0,
	BIT_SIZE = 1,
	SHORT_SIZE = 2,
	INT_SIZE = 4,
	LONG_SIZE = 8,
	PTR_SIZE = 8,
	FLOAT_SIZE = 16,
	DOUBLE_SIZE = 16,
};

enum INSTRUCTION {
	MOV2,
	ADD2,
	SUB2,
	IMUL2,
	XOR2,
	IDIV1,
	CDQ0,
	NEG1,
	TEST2,
	JNZ1,
	JMP1,
	JZ1,
};
